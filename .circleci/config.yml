version: 2.1

jobs:
  build:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: large

    steps:
      - checkout 
      - run: 
          name: run minikube 
          no_output_timeout: 40m
          command : |
            free -m
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gpg
            sudo mkdir -p /etc/apt/keyrings
            sudo touch -y /etc/apt/keyrings/kubernetes-apt-keyring.gpg || echo done
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl
            # echo "Setup Minikube"
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            echo minikube waiting
            export no_proxy="127.0.0.1,192.168.49.2"
            minikube config set cpus 2
            minikube config set memory 8192
            minikube start #--driver=docker
            sleep 20
            echo minikube started
            echo "Minikube started---------------------------------------------------------------------------------------"
            
            # To check the allocated values 
            minikube config get cpus
            minikube config get memory

            MINIKUBE_IP=`minikube ip`
            echo $MINIKUBE_IP
            free -m
            cat ~/.kube/config
        
            minikube kubectl -- get po -A #Interact with Minikube cluster
            kubectl create namespace paymenthub
            kubectl get -A namespace  

            # echo "Install Nginx---------------------------------------------------------------------------------------"
            # sudo apt install nginx        
            # sudo touch /etc/nginx/conf.d/minikube.conf 
            # echo "create nginx conf"
            # sudo chmod 777 -R /etc/nginx/conf.d/
            # echo "changed access"

            # sudo apt-get install apache2-utils -y
            # echo "apache2-utils installed"
            # htpasswd -bc /home/circleci/project/.htpasswd minikube minikube

            # sudo cat \<<EOF > /etc/nginx/conf.d/minikube.conf 
            # server {
            #     listen       8080;
            #     listen [::]:8080;
            #     server_name  localhost;
            #     access_log /home/circleci/project/nginx_access.log;
            #     auth_basic "Administrators Area";
            #     auth_basic_user_file /home/circleci/project/.htpasswd;    
                
            #     location / {   
            #         proxy_pass https://$MINIKUBE_IP:8443;
            #         proxy_ssl_certificate /home/circleci/.minikube/profiles/minikube/client.crt;
            #         proxy_ssl_certificate_key /home/circleci/.minikube/profiles/minikube/client.key;
            #     }
            # }
            # EOF
            # sudo service nginx restart || echo 'start nginx'
            # #SYSTEMD_LESS=FRXMK  systemctl status nginx.service
            
            # sleep 10
            # echo "Nginx ready---------------------------------------------------------------------------------------"
            
            # echo "test-nginx-proxy"
            # curl -u minikube:minikube http://localhost:8080
            
            curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
            ngrok config add-authtoken $AUTH_TOKEN
            echo "web_addr: $LOCAL_PORT" >> /home/circleci/.config/ngrok/ngrok.yml
            ngrok http https://$MINIKUBE_IP:8443 > /dev/null &

            echo -n "Extracting ngrok public url ."
            NGROK_PUBLIC_URL=""
            while [ -z "$NGROK_PUBLIC_URL" ]; do
              # Run 'curl' against ngrok API and extract public (using 'sed' command)
              export NGROK_PUBLIC_URL=$(curl --silent --max-time 10 --connect-timeout 5 \
                                        --show-error http://127.0.0.1:$LOCAL_PORT/api/tunnels | \
                                        sed -nE 's/.*public_url":"https:..([^"]*).*/\1/p')
              sleep 1
              echo -n "."
            done

            echo "Ngrok ready---------------------------------------------------------------------------------------"
            
            echo "https://$NGROK_PUBLIC_URL"
            echo "https://$NGROK_PUBLIC_URL"

            echo "test ngrok "
            #curl -u minikube:minikube https://$NGROK_PUBLIC_URL
 
            #docker logs -f `docker ps |grep nginx | cut -d " " -f1`

            # curl --request GET \
            # --url     http://localhost:80 \
            # --cert    /home/circleci/.minikube/profiles/minikube/client.crt \
            # --key     /home/circleci/.minikube/profiles/minikube/client.key \
            # --cacert  /home/circleci/.minikube/ca.crt \
            # --verbose

            echo "client.crt---------------------------------------------------------------------------------------"
            cat /home/circleci/.minikube/profiles/minikube/client.crt
            echo "client.key---------------------------------------------------------------------------------------"
            cat /home/circleci/.minikube/profiles/minikube/client.key
            echo "ca.crt---------------------------------------------------------------------------------------"
            cat /home/circleci/.minikube/ca.crt
            echo "---------------------------------------------------------------------------------------"

            #minikube logs -f
            sleep 1000

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          context:
            - Ngrok
